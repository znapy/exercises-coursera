ee the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Spotbugs:     PASSED
PMD:          FAILED (7 warnings)
Checkstyle:   FAILED (0 errors, 57 warnings)

Correctness:  33/35 tests passed
Memory:       16/16 tests passed
Timing:       36/42 tests passed

Aggregate score: 93.71%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
9.9K Oct 14 07:52 KdTree.java
3.3K Oct 14 07:52 PointSET.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac PointSET.java
*-----------------------------------------------------------

% javac KdTree.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
PointSET:

KdTree:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------
M D UP_UNUSED_PARAMETER UP: Static or private method KdTree.drawPoint(Point2D, Point2D, boolean) has unused parameters  At KdTree.java:[lines 197-205]
M D UP_UNUSED_PARAMETER UP: Static or private method KdTree.drawPoint(Point2D, Point2D, boolean) has unused parameters  At KdTree.java:[lines 197-205]
M D DLS_DEAD_LOCAL_STORE DLS: Assigns a value to the local variable 'last' but that value is never used.  At KdTree.java:[line 96]


================================================================


% pmd .
*-----------------------------------------------------------
KdTree.java:41: The private instance (or static) variable 'p' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
KdTree.java:42: The private instance (or static) variable 'rect' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
KdTree.java:96: Avoid unused local variables, such as 'last'. [UnusedLocalVariable]
KdTree.java:100: Linguistics Antipattern - The setter 'setLastNodeForPoint' should not return any type except void linguistically [LinguisticNaming]
KdTree.java:196: Avoid unused parameter variables, such as 'prevPoint'. [UnusedFormalParameter]
KdTree.java:196: Avoid unused parameter variables, such as 'theLast'. [UnusedFormalParameter]
PointSET.java:32: The private instance (or static) variable 'points' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
PMD ends with 7 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] KdTree.java:29:8: Unused import statement for 'edu.princeton.cs.algs4.In'. [UnusedImports]
[WARN] KdTree.java:34:1: File contains tab characters (this is the first occurrence). Configure your editor to replace tabs with spaces. [FileTabCharacter]
[WARN] KdTree.java:36:5: Declare static variables before instance variables, constructors, and methods. [DeclarationOrder]
[WARN] KdTree.java:37:5: Declare static variables before instance variables, constructors, and methods. [DeclarationOrder]
[WARN] KdTree.java:45:53: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:51:26: '{' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:51:27: 'return' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:51:36: ';' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:51:37: '}' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:52:26: '{' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:52:27: 'return' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:52:36: ';' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:52:37: '}' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:53:35: '{' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:53:42: ';' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:53:43: '}' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:54:35: '{' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:54:42: ';' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:54:43: '}' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:55:32: '{' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:55:33: 'return' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:55:41: ';' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:55:42: '}' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:56:35: '{' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:56:36: 'return' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:56:47: ';' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:56:48: '}' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:66:20: Redundant 'final' modifier. [RedundantModifier]
[WARN] KdTree.java:72:5: Define constructors after static and instance variables but before methods. [DeclarationOrder]
[WARN] KdTree.java:105:16: The local variable 'rect_x1' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] KdTree.java:106:16: The local variable 'rect_y1' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] KdTree.java:107:16: The local variable 'rect_x2' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] KdTree.java:108:16: The local variable 'rect_y2' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] KdTree.java:116:28: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:120:29: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:125:52: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:196:81: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:207:78: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:214:18: '=' is not followed by whitespace. [WhitespaceAround]
...
Checkstyle ends with 0 errors and 53 warnings.

% custom checkstyle checks for PointSET.java
*-----------------------------------------------------------
[WARN] PointSET.java:62:38: The numeric literal '0.01' appears to be unnecessary. [NumericLiteral]
[WARN] PointSET.java:96:40: Do not call 'distanceTo()' in this program; instead use 'distanceSquaredTo()'. [Performance]
Checkstyle ends with 0 errors and 2 warnings.

% custom checkstyle checks for KdTree.java
*-----------------------------------------------------------
[WARN] KdTree.java:209:38: The numeric literal '0.001' appears to be unnecessary. [NumericLiteral]
[WARN] KdTree.java:275:64: The numeric literal '2.1' appears to be unnecessary. [NumericLiteral]
Checkstyle ends with 0 errors and 2 warnings.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of PointSET
*-----------------------------------------------------------
Running 8 total tests.

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m

Test 1: insert n random points; check size() and isEmpty() after each insertion
        (size may be less than n because of duplicates)
  * 5 random points in a 1-by-1 grid
  * 50 random points in a 8-by-8 grid
  * 100 random points in a 16-by-16 grid
  * 1000 random points in a 128-by-128 grid
  * 5000 random points in a 1024-by-1024 grid
  * 50000 random points in a 65536-by-65536 grid
==> passed

Test 2: insert n random points; check contains() with random query points
  * 1 random points in a 1-by-1 grid
  * 10 random points in a 4-by-4 grid
  * 20 random points in a 8-by-8 grid
  * 10000 random points in a 128-by-128 grid
  * 100000 random points in a 1024-by-1024 grid
  * 100000 random points in a 65536-by-65536 grid
==> passed

Test 3: insert random points; check nearest() with random query points
  * 10 random points in a 4-by-4 grid
  * 15 random points in a 8-by-8 grid
  * 20 random points in a 16-by-16 grid
  * 100 random points in a 32-by-32 grid
  * 10000 random points in a 65536-by-65536 grid
==> passed

Test 4: insert random points; check range() with random query rectangles
  * 2 random points and random rectangles in a 2-by-2 grid
  * 10 random points and random rectangles in a 4-by-4 grid
  * 20 random points and random rectangles in a 8-by-8 grid
  * 100 random points and random rectangles in a 16-by-16 grid
  * 1000 random points and random rectangles in a 64-by-64 grid
  * 10000 random points and random rectangles in a 128-by-128 grid
==> passed

Test 5: call methods before inserting any points
 * size() and isEmpty()
 * contains()
 * nearest()
 * range()
==> passed

Test 6: call methods with null argument
  * insert()
  * contains()
  * range()
  * nearest()
==> passed

Test 7: check intermixed sequence of calls to insert(), isEmpty(),
        size(), contains(), range(), and nearest() with
        probabilities (p1, p2, p3, p4, p5, p6, p7), respectively
  * 10000 calls with random points in a 1-by-1 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 16-by-16 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 128-by-128 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 1024-by-1024 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 8192-by-8192 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 65536-by-65536 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
==> passed

Test 8: check that two PointSET objects can be created at the same time
==> passed


Total: 8/8 tests passed!


================================================================
Testing correctness of KdTree
*-----------------------------------------------------------
Running 27 total tests.

In the tests below, we consider three classes of points and rectangles.

  * Non-degenerate points: no two points (or rectangles) share either an
                           x-coordinate or a y-coordinate

  * Distinct points:       no two points (or rectangles) share both an
                           x-coordinate and a y-coordinate

  * General points:        no restrictions on the x-coordinates or y-coordinates
                           of the points (or rectangles)

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m (inclusive).

Test 1a: insert points from file; check size() and isEmpty() after each insertion
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 1b: insert non-degenerate points; check size() and isEmpty() after each insertion
  * 1 random non-degenerate points in a 1-by-1 grid
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 50 random non-degenerate points in a 128-by-128 grid
  * 500 random non-degenerate points in a 1024-by-1024 grid
  * 50000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 1c: insert distinct points; check size() and isEmpty() after each insertion
  * 1 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 8-by-8 grid
  * 20 random distinct points in a 16-by-16 grid
  * 10000 random distinct points in a 128-by-128 grid
  * 100000 random distinct points in a 1024-by-1024 grid
  * 100000 random distinct points in a 65536-by-65536 grid
==> passed

Test 1d: insert general points; check size() and isEmpty() after each insertion
  * 5 random general points in a 1-by-1 grid
  * 10 random general points in a 4-by-4 grid
  * 50 random general points in a 8-by-8 grid
  * 100000 random general points in a 16-by-16 grid
  * 100000 random general points in a 128-by-128 grid
  * 100000 random general points in a 1024-by-1024 grid
==> passed

Test 2a: insert points from file; check contains() with random query points
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 2b: insert non-degenerate points; check contains() with random query points
  * 1 random non-degenerate points in a 1-by-1 grid
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 20 random non-degenerate points in a 32-by-32 grid
  * 500 random non-degenerate points in a 1024-by-1024 grid
  * 10000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 2c: insert distinct points; check contains() with random query points
  * 1 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 4-by-4 grid
  * 20 random distinct points in a 8-by-8 grid
  * 10000 random distinct points in a 128-by-128 grid
  * 100000 random distinct points in a 1024-by-1024 grid
  * 100000 random distinct points in a 65536-by-65536 grid
==> passed

Test 2d: insert general points; check contains() with random query points
  * 10000 random general points in a 1-by-1 grid
  * 10000 random general points in a 16-by-16 grid
  * 10000 random general points in a 128-by-128 grid
  * 10000 random general points in a 1024-by-1024 grid
==> passed

Test 3a: insert points from file; check range() with random query rectangles
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 3b: insert non-degenerate points; check range() with random query rectangles
  * 1 random non-degenerate points and random rectangles in a 2-by-2 grid
  * 5 random non-degenerate points and random rectangles in a 8-by-8 grid
  * 10 random non-degenerate points and random rectangles in a 16-by-16 grid
  * 20 random non-degenerate points and random rectangles in a 32-by-32 grid
  * 500 random non-degenerate points and random rectangles in a 1024-by-1024 grid
  * 10000 random non-degenerate points and random rectangles in a 65536-by-65536 grid
==> passed

Test 3c: insert distinct points; check range() with random query rectangles
  * 2 random distinct points and random rectangles in a 2-by-2 grid
  * 10 random distinct points and random rectangles in a 4-by-4 grid
  * 20 random distinct points and random rectangles in a 8-by-8 grid
  * 100 random distinct points and random rectangles in a 16-by-16 grid
  * 1000 random distinct points and random rectangles in a 64-by-64 grid
  * 10000 random distinct points and random rectangles in a 128-by-128 grid
==> passed

Test 3d: insert general points; check range() with random query rectangles
  * 5000 random general points and random rectangles in a 2-by-2 grid
  * 5000 random general points and random rectangles in a 16-by-16 grid
  * 5000 random general points and random rectangles in a 128-by-128 grid
  * 5000 random general points and random rectangles in a 1024-by-1024 grid
==> passed

Test 3e: insert random points; check range() with tiny rectangles
         enclosing each point
  * 5 tiny rectangles and 5 general points in a 2-by-2 grid
  * 10 tiny rectangles and 10 general points in a 4-by-4 grid
  * 20 tiny rectangles and 20 general points in a 8-by-8 grid
  * 5000 tiny rectangles and 5000 general points in a 128-by-128 grid
  * 5000 tiny rectangles and 5000 general points in a 1024-by-1024 grid
  * 5000 tiny rectangles and 5000 general points in a 65536-by-65536 grid
==> passed

Test 4a: insert points from file; check range() with random query rectangles
         and check traversal of kd-tree
  * input5.txt
  * input10.txt
==> passed

Test 4b: insert non-degenerate points; check range() with random query rectangles
         and check traversal of kd-tree
  * 3 random non-degenerate points and 1000 random rectangles in a 4-by-4 grid
  * 6 random non-degenerate points and 1000 random rectangles in a 8-by-8 grid
  * 10 random non-degenerate points and 1000 random rectangles in a 16-by-16 grid
  * 20 random non-degenerate points and 1000 random rectangles in a 32-by-32 grid
  * 30 random non-degenerate points and 1000 random rectangles in a 64-by-64 grid
==> passed

Test 5a: insert points from file; check nearest() with random query points
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 5b: insert non-degenerate points; check nearest() with random query points
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 20 random non-degenerate points in a 32-by-32 grid
  * 30 random non-degenerate points in a 64-by-64 grid
  * 10000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 5c: insert distinct points; check nearest() with random query points
  * 10 random distinct points in a 4-by-4 grid
  * 15 random distinct points in a 8-by-8 grid
  * 20 random distinct points in a 16-by-16 grid
  * 100 random distinct points in a 32-by-32 grid
  * 10000 random distinct points in a 65536-by-65536 grid
==> passed

Test 5d: insert general points; check nearest() with random query points
  * 10000 random general points in a 16-by-16 grid
  * 10000 random general points in a 128-by-128 grid
  * 10000 random general points in a 1024-by-1024 grid
==> passed

Test 6a: insert points from file; check nearest() with random query points
         and check traversal of kd-tree
  * input5.txt
    - student   nearest() = (0.5, 0.4)
    - reference nearest() = (0.5, 0.4)
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.62, 0.51)
    - sequence of points inserted: 
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A B C D E 
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B D C E 
    - failed on trial 1 of 1000

  * input10.txt
    - student   nearest() = (0.32, 0.708)
    - reference nearest() = (0.32, 0.708)
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.24, 0.75)
    - sequence of points inserted: 
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A C D F 
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A C F 
    - failed on trial 1 of 1000

==> FAILED

Test 6b: insert non-degenerate points; check nearest() with random query points
         and check traversal of kd-tree
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
    - student   nearest() = (0.5625, 0.5625)
    - reference nearest() = (0.5625, 0.5625)
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.4375, 0.5)
    - sequence of points inserted: 
      A  0.75 0.375
      B  0.375 0.6875
      C  0.25 0.4375
      D  0.625 0.25
      E  0.8125 0.625
      F  0.6875 0.75
      G  0.1875 0.0625
      H  0.9375 0.3125
      I  0.0625 0.0
      J  0.5625 0.5625
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A B C G D J 
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B C D J 
    - failed on trial 1 of 1000

  * 20 random non-degenerate points in a 32-by-32 grid
    - student   nearest() = (0.90625, 0.03125)
    - reference nearest() = (0.90625, 0.03125)
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.9375, 0.09375)
    - sequence of points inserted: 
      A  0.625 0.53125
      B  0.21875 0.6875
      C  0.125 0.25
      D  0.0 0.8125
      E  0.25 0.9375
      F  0.5 0.15625
      G  0.3125 0.78125
      H  0.4375 0.0
      I  0.75 0.28125
      J  0.15625 0.71875
      K  0.59375 0.84375
      L  0.40625 0.5625
      M  0.65625 0.96875
      N  0.53125 0.5
      O  0.09375 0.34375
      P  0.46875 0.90625
      Q  0.90625 0.03125
      R  0.28125 0.0625
      S  0.875 0.625
      T  0.375 0.375
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A B C F H L N I Q 
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A I Q 
    - failed on trial 2 of 1000

  * 30 random non-degenerate points in a 64-by-64 grid
    - student   nearest() = (0.3125, 1.0)
    - reference nearest() = (0.3125, 1.0)
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 10
    - number of reference entries = 6
    - entry 2 of the two sequences are not equal
    - student   entry 2 = (0.515625, 0.3125)
    - reference entry 2 = (0.015625, 0.875)

    - failed on trial 1 of 1000

  * 50 random non-degenerate points in a 128-by-128 grid
    - student   nearest() = (0.515625, 0.6171875)
    - reference nearest() = (0.515625, 0.6171875)
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 25
    - number of reference entries = 14
    - entry 1 of the two sequences are not equal
    - student   entry 1 = (0.0390625, 0.6015625)
    - reference entry 1 = (0.75, 0.140625)

    - failed on trial 1 of 1000

  * 1000 random non-degenerate points in a 2048-by-2048 grid
    - student   nearest() = (0.0732421875, 0.271484375)
    - reference nearest() = (0.0732421875, 0.271484375)
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 25
    - number of reference entries = 15
    - entry 3 of the two sequences are not equal
    - student   entry 3 = (0.0, 0.33837890625)
    - reference entry 3 = (0.50732421875, 0.51025390625)

    - failed on trial 1 of 1000

==> FAILED

Test 7: check with no points
  * size() and isEmpty()
  * contains()
  * nearest()
  * range()
==> passed

Test 8: check that the specified exception is thrown with null arguments
  * argument to insert() is null
  * argument to contains() is null
  * argument to range() is null
  * argument to nearest() is null
==> passed

Test 9a: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with non-degenerate points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
==> passed

Test 9b: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with distinct points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with distinct points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with distinct points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with distinct points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with distinct points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with distinct points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
==> passed

Test 9c: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with general points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with general points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with general points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with general points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with general points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with general points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
==> passed

Test 10: insert n random points into two different KdTree objects;
        check that repeated calls to size(), contains(), range(),
        and nearest() with the same arguments yield same results
  * 10 random general points in a 4-by-4 grid
  * 20 random general points in a 8-by-8 grid
  * 100 random general points in a 128-by-128 grid
  * 1000 random general points in a 65536-by-65536 grid
==> passed


Total: 25/27 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Point2D
*-----------------------------------------------------------
Memory of Point2D object = 32 bytes

================================================================



Analyzing memory of RectHV
*-----------------------------------------------------------
Memory of RectHV object = 48 bytes

================================================================



Analyzing memory of PointSET
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a PointSET with n points (including Point2D and RectHV objects).
Maximum allowed memory is 96n + 200 bytes.

                 n       student (bytes)    reference (bytes)
--------------------------------------------------------------
=> passed        1          264                264
=> passed        2          360                360
=> passed        5          648                648
=> passed       10         1128               1128
=> passed       25         2568               2568
=> passed      100         9768               9768
=> passed      400        38568              38568
=> passed      800        76968              76968
==> 8/8 tests passed

Total: 8/8 tests passed!

Estimated student   memory (bytes) = 96.00 n + 168.00  (R^2 = 1.000)
Estimated reference memory (bytes) = 96.00 n + 168.00  (R^2 = 1.000)

================================================================



Analyzing memory of KdTree
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a KdTree with n points (including Point2D and RectHV objects).
Maximum allowed memory is 312n + 192 bytes.

                 n       student (bytes)    reference (bytes)
--------------------------------------------------------------
=> passed        1          160                160
=> passed        2          288                288
=> passed        5          672                672
=> passed       10         1312               1312
=> passed       25         3232               3232
=> passed      100        12832              12832
=> passed      400        51232              51232
=> passed      800       102432             102432
==> 8/8 tests passed

Total: 8/8 tests passed!

Estimated student   memory (bytes) = 128.00 n + 32.00  (R^2 = 1.000)
Estimated reference memory (bytes) = 128.00 n + 32.00  (R^2 = 1.000)

================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing PointSET
*-----------------------------------------------------------
Running 14 total tests.


Inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed   160000    1593727         
=> passed   320000    1521931         
=> passed   640000    1404764         
=> passed  1280000    1048209         
==> 4/4 tests passed

Performing contains() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed   160000     939278         
=> passed   320000     934626         
=> passed   640000     614271         
=> passed  1280000     612879         
==> 4/4 tests passed

Performing range() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed    10000       4343         
=> passed    20000       1439         
=> passed    40000        677         
==> 3/3 tests passed

Performing nearest() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed    10000       5368         
=> passed    20000       1750         
=> passed    40000        731         
==> 3/3 tests passed

Total: 14/14 tests passed!


================================================================



Timing KdTree
*-----------------------------------------------------------
Running 28 total tests.


Test 1a-d: Insert n points into a 2d tree. The table gives the average number of calls
           to methods in RectHV and Point per call to insert().

                                                                                                Point2D
               n      ops per second       RectHV()           x()               y()             equals()
----------------------------------------------------------------------------------------------------------------
=> passed   160000    1225827               1.0              33.2              31.7              21.6         
=> passed   320000    1271695               1.0              33.8              32.3              22.0         
=> passed   640000     843124               1.0              36.1              34.6              23.5         
=> passed  1280000     744561               1.0              39.2              37.7              25.6         
==> 4/4 tests passed


Test 2a-h: Perform contains() queries after inserting n points into a 2d tree. The table gives
           the average number of calls to methods in RectHV and Point per call to contains().

                                                                               Point2D
               n      ops per second       x()               y()               equals()
-----------------------------------------------------------------------------------------------
=> passed    10000    1207843              18.5              17.5              18.0         
=> passed    20000    1168248              19.7              18.7              19.2         
=> passed    40000    1049263              21.8              20.8              21.3         
=> passed    80000     892521              22.0              21.0              21.5         
=> passed   160000     766345              23.2              22.2              22.7         
=> passed   320000     733506              25.0              24.0              24.5         
=> passed   640000     451817              25.7              24.7              25.2         
=> passed  1280000     439443              27.2              26.2              26.7         
==> 8/8 tests passed


Test 3a-h: Perform range() queries after inserting n points into a 2d tree. The table gives
           the average number of calls to methods in RectHV and Point per call to range().

               n      ops per second       intersects()      contains()        x()               y()
---------------------------------------------------------------------------------------------------------------
=> passed    10000     619959              50.4              31.1              50.1              12.1         
=> passed    20000     532731              52.7              32.6              53.3              16.2         
=> passed    40000     462534              64.9              39.3              63.1              14.1         
=> passed    80000     372182              67.1              40.7              65.2              14.9         
=> passed   160000     326202              70.0              42.5              70.9              20.4         
=> passed   320000     277392              67.0              40.2              65.2              15.7         
=> passed   640000     209550              72.0              43.3              70.7              19.2         
=> passed  1280000     175579              78.7              47.0              74.8              14.2         
==> 8/8 tests passed


Test 4a-h: Perform nearest() queries after inserting n points into a 2d tree. The table gives
           the average number of calls to methods in RectHV and Point per call to nearest().

                                         Point2D                 RectHV
               n      ops per second     distanceSquaredTo()     distanceSquaredTo()        x()               y()
------------------------------------------------------------------------------------------------------------------------
=> passed    10000   169755                 161.7                  233.1                   643.4             602.4         
=> passed    20000   156182                 156.6                  227.1                   607.6             588.7         
=> FAILED    40000    68576                 359.9                  505.6   (1.7x)         1429.5   (1.8x)   1305.3   (1.6x)
=> FAILED    80000    60129                 320.3                  455.4   (1.5x)         1199.3   (1.5x)   1243.0   (1.6x)
=> FAILED   160000    27007   (0.9x)        657.8   (1.1x)         915.0   (3.0x)         2569.6   (3.2x)   2348.8   (2.9x)
=> FAILED   320000    26772                 495.7                  700.7   (2.3x)         1882.4   (2.4x)   1938.0   (2.4x)
=> FAILED   640000    15259   (0.8x)        804.4   (1.3x)        1129.4   (3.8x)         3207.0   (4.0x)   3150.7   (3.9x)
=> FAILED  1280000    10455   (0.5x)        882.4   (1.5x)        1241.2   (4.1x)         3338.9   (4.2x)   3474.5   (4.3x)
==> 2/8 tests passed



Total: 22/28 tests passed!


================================================================

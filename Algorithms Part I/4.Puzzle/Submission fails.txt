See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Spotbugs:     PASSED
PMD:          FAILED (10 warnings)
Checkstyle:   FAILED (0 errors, 54 warnings)

Correctness:  51/51 tests passed
Memory:       20/22 tests passed
Timing:       121/125 tests passed

Aggregate score: 98.45%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
8.1K Sep  2 06:57 Board.java
5.5K Sep  2 06:57 Solver.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac Board.java
*-----------------------------------------------------------

% javac Solver.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Board:

Solver:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------
M D UP_UNUSED_PARAMETER UP: Static or private method Board.manhattanForNeighbor(byte, Board) has unused parameters  At Board.java:[lines 305-308]
M P SBSC_USE_STRINGBUFFER_CONCATENATION SBSC: Builds a 'String' object using the '+' operator in a loop, which can take time quadratic in the length of the resulting string. Instead, use 'StringBuilder'.  At Board.java:[line 100]
L P UPM_UNCALLED_PRIVATE_METHOD UPM: The private method 'printCurrentChain()' is never called.  At Solver.java:[lines 147-172]
L P UPM_UNCALLED_PRIVATE_METHOD UPM: The private method 'printBoards()' is never called.  At Solver.java:[lines 132-144]


================================================================


% pmd .
*-----------------------------------------------------------
Board.java:33: You should not need to define more than one array instance variable in this program. [AtMostOneArrayInstanceVariable]
Board.java:35: The private instance (or static) variable 'boardSize' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Board.java:36: The private instance (or static) variable 'boardTiles' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Board.java:37: The private instance (or static) variable 'zeroPosition' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Board.java:38: The private instance (or static) variable 'zeroCoordinates' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Board.java:299: Avoid unused parameter variables, such as 'direction'. [UnusedFormalParameter]
Board.java:313: The method body is empty. If this is your intent, document it with a comment. [UncommentedEmptyMethodBody]
Solver.java:36: The private instance (or static) variable 'pqMain' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Solver.java:130: Avoid unused private methods, such as 'printBoards(Board,Board)'. [UnusedPrivateMethod]
Solver.java:146: Avoid unused private methods, such as 'printCurrentChain()'. [UnusedPrivateMethod]
PMD ends with 10 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] Board.java:24: Java automatically imports all classes and interfaces in the package 'java.lang'. So, there is no need to import such classes or interfaces; you can refer directly to them without the 'java.lang' prefix. [UnnecessaryJavaLang]
[WARN] Board.java:24:1: Unnecessary import statement for 'java.lang.Math' because it is from the package 'java.lang'. [RedundantImport]
[WARN] Board.java:24:8: Unused import statement for 'java.lang.Math'. [UnusedImports]
[WARN] Board.java:26:3: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] Board.java:28:3: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] Board.java:31:8: Unused import statement for 'edu.princeton.cs.algs4.StdOut'. [UnusedImports]
[WARN] Board.java:34:1: File contains tab characters (this is the first occurrence). Configure your editor to replace tabs with spaces. [FileTabCharacter]
[WARN] Board.java:100:31: '+' is followed by whitespace. [NoWhitespaceAfter]
[WARN] Board.java:202:50: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:230:42: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:255:29: The local (or parameter) variable 'boardTiles' has the same name as an instance variable. Use a different name. [HiddenField]
[WARN] Board.java:273:26: '?' is not followed by whitespace. [WhitespaceAround]
[WARN] Board.java:273:26: '?' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:273:28: ':' is not followed by whitespace. [WhitespaceAround]
[WARN] Board.java:273:28: ':' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:274:28: '?' is not followed by whitespace. [WhitespaceAround]
[WARN] Board.java:274:28: '?' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:274:30: ':' is not followed by whitespace. [WhitespaceAround]
[WARN] Board.java:274:30: ':' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:275:26: '?' is not followed by whitespace. [WhitespaceAround]
[WARN] Board.java:275:26: '?' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:275:28: ':' is not followed by whitespace. [WhitespaceAround]
[WARN] Board.java:275:28: ':' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:276:25: '?' is not followed by whitespace. [WhitespaceAround]
[WARN] Board.java:276:25: '?' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:276:27: ':' is not followed by whitespace. [WhitespaceAround]
[WARN] Board.java:276:27: ':' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:288:45: The local (or parameter) variable 'boardTiles' has the same name as an instance variable. Use a different name. [HiddenField]
[WARN] Board.java:305:31: '.' is followed by whitespace. [NoWhitespaceAfter]
[WARN] Board.java:305:63: '.' is followed by whitespace. [NoWhitespaceAfter]
[WARN] Board.java:306:83: '.' is followed by whitespace. [NoWhitespaceAfter]
[WARN] Board.java:306:107: '.' is followed by whitespace. [NoWhitespaceAfter]
[WARN] Solver.java:27: Java automatically imports all classes and interfaces in the package 'java.lang'. So, there is no need to import such classes or interfaces; you can refer directly to them without the 'java.lang' prefix. [UnnecessaryJavaLang]
[WARN] Solver.java:27:1: Unnecessary import statement for 'java.lang.Math' because it is from the package 'java.lang'. [RedundantImport]
[WARN] Solver.java:27:8: Unused import statement for 'java.lang.Math'. [UnusedImports]
[WARN] Solver.java:33:1: File contains tab characters (this is the first occurrence). Configure your editor to replace tabs with spaces. [FileTabCharacter]
[WARN] Solver.java:104:47: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] Solver.java:106:56: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] Solver.java:114:11: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
...
Checkstyle ends with 0 errors and 51 warning.

% custom checkstyle checks for Board.java
*-----------------------------------------------------------
[WARN] Board.java:49:44: The numeric literal '127' appears to be unnecessary. [NumericLiteral]
Checkstyle ends with 0 errors and 1 warning.

% custom checkstyle checks for Solver.java
*-----------------------------------------------------------
[WARN] Solver.java:36:17: Can you make the variable of type 'MinPQ' a local variable instead of an instance (or static) variable? [Design]
[WARN] Solver.java:154:60: You should not need to call 'hamming()' in this program. Instead, submit the version with 'manhattan()'. [Performance]
Checkstyle ends with 0 errors and 2 warnings.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Board
*-----------------------------------------------------------
Running 26 total tests.

Tests 4-7 and 14-17 rely upon toString() returning results in prescribed format.

Test 1a: check hamming() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle07.txt
  * puzzle17.txt
  * puzzle27.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 1b: check hamming() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 2a: check manhattan() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle07.txt
  * puzzle17.txt
  * puzzle27.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 2b: check manhattan() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 3: check dimension() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 6-by-6
==> passed

Test 4a: check toString() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 4b: check toString() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 5a: check neighbors() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 5b: check neighbors() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 6a: check neighbors() of neighbors() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 6b: check neighbors() of neighbors() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
==> passed

Test 7a: check twin() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 7b: check twin() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
==> passed

Test 8a: check isGoal() with file inputs
  * puzzle00.txt
  * puzzle04.txt
  * puzzle16.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-00.txt
  * puzzle4x4-00.txt
==> passed

Test 8b: check isGoal() on n-by-n goal boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 6-by-6
  * 100-by-100
==> passed

Test 9: check that two Board objects can be created at the same time
  * random 3-by-3 and 3-by-3 boards
  * random 4-by-4 and 4-by-4 boards
  * random 2-by-2 and 2-by-2 boards
  * random 3-by-3 and 4-by-4 boards
  * random 4-by-4 and 3-by-3 boards
==> passed

Test 10a: check equals()
  * reflexive
  * symmetric
  * transitive
  * argument is null
  * argument is of type String
  * argument is of type UncastableString
  * Board object stored in a variable of type Object
==> passed

Test 10b: check correctness of equals() on random n-by-n boards
  * n = 2
  * n = 3
  * n = 4
  * 5 <= n < 10
==> passed

Test 10c: check equals() when board sizes m and n are different
  * m = 4, n = 5
  * m = 2, n = 5
  * m = 5, n = 3
  * m = 2, n = 3
  * m = 3, n = 2
==> passed

Test 11: check that Board is immutable by changing argument array after
         construction and making sure Board does not mutate
==> passed

Test 12: check that Board is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle10.txt
  * puzzle20.txt
  * puzzle30.txt
  * 2-by-2
  * 3-by-3
  * 4-by-4
==> passed

Test 13: check dimension() on a board that is kth neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1st neighbor of puzzle27.txt
  * 2nd neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==> passed

Test 14: check hamming() on a board that is kth neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1st neighbor of puzzle27.txt
  * 2nd neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==> passed

Test 15: check manhattan() on a board that is a kth neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1st neighbor of puzzle27.txt
  * 2nd neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==> passed

Test 16: check hamming() on a board that is a kth twin of a board
  * 0th twin of puzzle27.txt
  * 1st twin of puzzle27.txt
  * 2nd twin of puzzle27.txt
  * 13th twin of puzzle27.txt
  * 13th twin of puzzle00.txt
  * 13th twin of puzzle2x2-unsolvable1.txt
==> passed

Test 17: check manhattan() on a board that is a kth twin of a board
  * 0th twin of puzzle27.txt
  * 1st twin of puzzle27.txt
  * 2nd twin of puzzle27.txt
  * 13th twin of puzzle27.txt
  * 13th twin of puzzle00.txt
  * 13th twin of puzzle2x2-unsolvable1.txt
==> passed


Total: 26/26 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Board
*-----------------------------------------------------------
Running 10 total tests.

Memory usage of an n-by-n board
[ must be at most 4n^2 + 32n + 64 bytes ]


              n       student (bytes)    reference (bytes)
----------------------------------------------------------
=> passed     2           120                  128
=> passed     3           144                  192
=> passed     4           168                  240
=> passed     8           360                  560
=> passed    12           680                 1008
=> passed    16          1128                 1584
=> passed    20          1704                 2288
=> passed    37          5584                 6856
=> passed    72         20840                23088
=> passed   120         57704                61488
==> 10/10 tests passed

Total: 10/10 tests passed!

Student   memory = 4.00 n^2 + 0.00 n + 104.00   (R^2 = 1.000)
Reference memory = 4.00 n^2 + 32.00 n + 48.00   (R^2 = 1.000)


================================================================



********************************************************************************
*  TESTING CORRECTNESS (substituting reference Board)
********************************************************************************

Testing correctness of Solver
*-----------------------------------------------------------
Running 25 total tests.

Test 1a: check moves() with file inputs
  * puzzle00.txt
  * puzzle01.txt
  * puzzle02.txt
  * puzzle03.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle06.txt
  * puzzle07.txt
  * puzzle08.txt
  * puzzle09.txt
  * puzzle10.txt
  * puzzle11.txt
  * puzzle12.txt
  * puzzle13.txt
==> passed

Test 1b: check solution() with file inputs
  * puzzle00.txt
  * puzzle01.txt
  * puzzle02.txt
  * puzzle03.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle06.txt
  * puzzle07.txt
  * puzzle08.txt
  * puzzle09.txt
  * puzzle10.txt
  * puzzle11.txt
  * puzzle12.txt
  * puzzle13.txt
==> passed

Test 2a: check moves() with more file inputs
  * puzzle14.txt
  * puzzle15.txt
  * puzzle16.txt
  * puzzle17.txt
  * puzzle18.txt
  * puzzle19.txt
  * puzzle20.txt
  * puzzle21.txt
  * puzzle22.txt
  * puzzle23.txt
  * puzzle24.txt
  * puzzle25.txt
  * puzzle26.txt
  * puzzle27.txt
  * puzzle28.txt
  * puzzle29.txt
  * puzzle30.txt
  * puzzle31.txt
==> passed

Test 2b: check solution() with more file inputs
  * puzzle14.txt
  * puzzle15.txt
  * puzzle16.txt
  * puzzle17.txt
  * puzzle18.txt
  * puzzle19.txt
  * puzzle20.txt
  * puzzle21.txt
  * puzzle22.txt
  * puzzle23.txt
  * puzzle24.txt
  * puzzle25.txt
  * puzzle26.txt
  * puzzle27.txt
  * puzzle28.txt
  * puzzle29.txt
  * puzzle30.txt
  * puzzle31.txt
==> passed

Test 3a: check moves() with random solvable n-by-n boards
  * 1000 random 3-by-3 boards that are exactly 1 move from goal
  * 1000 random 3-by-3 boards that are exactly 2 moves from goal
  * 1000 random 3-by-3 boards that are exactly 3 moves from goal
  * 1000 random 3-by-3 boards that are exactly 4 moves from goal
  * 1000 random 3-by-3 boards that are exactly 5 moves from goal
  * 1000 random 3-by-3 boards that are exactly 6 moves from goal
  * 1000 random 3-by-3 boards that are exactly 7 moves from goal
  * 1000 random 3-by-3 boards that are exactly 8 moves from goal
  * 1000 random 3-by-3 boards that are exactly 9 moves from goal
  * 1000 random 3-by-3 boards that are exactly 10 moves from goal
  * 1000 random 3-by-3 boards that are exactly 11 moves from goal
  * 1000 random 3-by-3 boards that are exactly 12 moves from goal
==> passed

Test 3b: check solution() with random solvable n-by-n boards
  * 1000 random 3-by-3 boards that are exactly 1 move from goal
  * 1000 random 3-by-3 boards that are exactly 2 moves from goal
  * 1000 random 3-by-3 boards that are exactly 3 moves from goal
  * 1000 random 3-by-3 boards that are exactly 4 moves from goal
  * 1000 random 3-by-3 boards that are exactly 5 moves from goal
  * 1000 random 3-by-3 boards that are exactly 6 moves from goal
  * 1000 random 3-by-3 boards that are exactly 7 moves from goal
  * 1000 random 3-by-3 boards that are exactly 8 moves from goal
  * 1000 random 3-by-3 boards that are exactly 9 moves from goal
  * 1000 random 3-by-3 boards that are exactly 10 moves from goal
  * 1000 random 3-by-3 boards that are exactly 11 moves from goal
  * 1000 random 3-by-3 boards that are exactly 12 moves from goal
==> passed

Test 4: create two Solver objects at the same time
  * puzzle04.txt and puzzle04.txt
  * puzzle00.txt and puzzle04.txt
  * puzzle04.txt and puzzle00.txt
==> passed

Test 5a: call isSolvable() with file inputs
  * puzzle01.txt
  * puzzle03.txt
  * puzzle04.txt
  * puzzle17.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt
  * puzzle4x4-unsolvable.txt
==> passed

Test 5b: call isSolvable() on random n-by-n boards
  * 100 random 2-by-2 boards
==> passed

Test 6: check moves() on unsolvable puzzles
  * puzzle2x2-unsolvable1.txt
  * puzzle2x2-unsolvable2.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt
  * puzzle4x4-unsolvable.txt
==> passed

Test 7: check solution() on unsolvable puzzles
  * puzzle2x2-unsolvable1.txt
  * puzzle2x2-unsolvable2.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt
  * puzzle4x4-unsolvable.txt
==> passed

Test 8a: check that Solver is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle3x3-00.txt
  * puzzle3x3-01.txt
  * puzzle3x3-05.txt
  * puzzle3x3-10.txt
  * random 2-by-2 solvable boards
==> passed

Test 8b: check that Solver is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt
  * puzzle4x4-unsolvable.txt
  * random 2-by-2 unsolvable boards
==> passed

Test 9a: check that equals() method in Board is called
  * puzzle04.txt
  * puzzle05.txt
  * puzzle10.txt
==> passed

Test 9b: check that equals() method in Board is called only
         with an argument of type Board
  * puzzle00.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle10.txt
==> passed

Test 9c: check that equals() method in Board is called only
         with a neighbor of a neighbor as an argument
  * puzzle00.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle10.txt
  * puzzle27.txt
==> passed

Test 10: check that constructor throws exception if board is null
==> passed

Test 11a: check moves() with 2-by-2 file inputs
  * puzzle2x2-00.txt
  * puzzle2x2-01.txt
  * puzzle2x2-02.txt
  * puzzle2x2-03.txt
  * puzzle2x2-04.txt
  * puzzle2x2-05.txt
  * puzzle2x2-06.txt
==> passed

Test 11b: check solution() with 2-by-2 file inputs
  * puzzle2x2-00.txt
  * puzzle2x2-01.txt
  * puzzle2x2-02.txt
  * puzzle2x2-03.txt
  * puzzle2x2-04.txt
  * puzzle2x2-05.txt
  * puzzle2x2-06.txt
==> passed

Test 12a: check moves() with 3-by-3 file inputs
  * puzzle3x3-00.txt
  * puzzle3x3-01.txt
  * puzzle3x3-02.txt
  * puzzle3x3-03.txt
  * puzzle3x3-04.txt
  * puzzle3x3-05.txt
  * puzzle3x3-06.txt
  * puzzle3x3-07.txt
  * puzzle3x3-08.txt
  * puzzle3x3-09.txt
  * puzzle3x3-10.txt
  * puzzle3x3-11.txt
  * puzzle3x3-12.txt
  * puzzle3x3-13.txt
  * puzzle3x3-14.txt
  * puzzle3x3-15.txt
  * puzzle3x3-16.txt
  * puzzle3x3-17.txt
  * puzzle3x3-18.txt
  * puzzle3x3-19.txt
  * puzzle3x3-20.txt
  * puzzle3x3-21.txt
  * puzzle3x3-22.txt
  * puzzle3x3-23.txt
  * puzzle3x3-24.txt
  * puzzle3x3-25.txt
  * puzzle3x3-26.txt
  * puzzle3x3-27.txt
  * puzzle3x3-28.txt
  * puzzle3x3-29.txt
  * puzzle3x3-30.txt
==> passed

Test 12b: check solution() with 3-by-3 file inputs
  * puzzle3x3-00.txt
  * puzzle3x3-01.txt
  * puzzle3x3-02.txt
  * puzzle3x3-03.txt
  * puzzle3x3-04.txt
  * puzzle3x3-05.txt
  * puzzle3x3-06.txt
  * puzzle3x3-07.txt
  * puzzle3x3-08.txt
  * puzzle3x3-09.txt
  * puzzle3x3-10.txt
  * puzzle3x3-11.txt
  * puzzle3x3-12.txt
  * puzzle3x3-13.txt
  * puzzle3x3-14.txt
  * puzzle3x3-15.txt
  * puzzle3x3-16.txt
  * puzzle3x3-17.txt
  * puzzle3x3-18.txt
  * puzzle3x3-19.txt
  * puzzle3x3-20.txt
  * puzzle3x3-21.txt
  * puzzle3x3-22.txt
  * puzzle3x3-23.txt
  * puzzle3x3-24.txt
  * puzzle3x3-25.txt
  * puzzle3x3-26.txt
  * puzzle3x3-27.txt
  * puzzle3x3-28.txt
  * puzzle3x3-29.txt
  * puzzle3x3-30.txt
==> passed

Test 13a: check moves() with 4-by-4 file inputs
  * puzzle4x4-00.txt
  * puzzle4x4-01.txt
  * puzzle4x4-02.txt
  * puzzle4x4-03.txt
  * puzzle4x4-04.txt
  * puzzle4x4-05.txt
  * puzzle4x4-06.txt
  * puzzle4x4-07.txt
  * puzzle4x4-08.txt
  * puzzle4x4-09.txt
  * puzzle4x4-10.txt
  * puzzle4x4-11.txt
  * puzzle4x4-12.txt
  * puzzle4x4-13.txt
  * puzzle4x4-14.txt
  * puzzle4x4-15.txt
  * puzzle4x4-16.txt
  * puzzle4x4-17.txt
  * puzzle4x4-18.txt
  * puzzle4x4-19.txt
  * puzzle4x4-20.txt
  * puzzle4x4-21.txt
  * puzzle4x4-22.txt
  * puzzle4x4-23.txt
  * puzzle4x4-24.txt
  * puzzle4x4-25.txt
  * puzzle4x4-26.txt
  * puzzle4x4-27.txt
  * puzzle4x4-28.txt
  * puzzle4x4-29.txt
  * puzzle4x4-30.txt
==> passed

Test 13b: check solution() with 4-by-4 file inputs
  * puzzle4x4-00.txt
  * puzzle4x4-01.txt
  * puzzle4x4-02.txt
  * puzzle4x4-03.txt
  * puzzle4x4-04.txt
  * puzzle4x4-05.txt
  * puzzle4x4-06.txt
  * puzzle4x4-07.txt
  * puzzle4x4-08.txt
  * puzzle4x4-09.txt
  * puzzle4x4-10.txt
  * puzzle4x4-11.txt
  * puzzle4x4-12.txt
  * puzzle4x4-13.txt
  * puzzle4x4-14.txt
  * puzzle4x4-15.txt
  * puzzle4x4-16.txt
  * puzzle4x4-17.txt
  * puzzle4x4-18.txt
  * puzzle4x4-19.txt
  * puzzle4x4-20.txt
  * puzzle4x4-21.txt
  * puzzle4x4-22.txt
  * puzzle4x4-23.txt
  * puzzle4x4-24.txt
  * puzzle4x4-25.txt
  * puzzle4x4-26.txt
  * puzzle4x4-27.txt
  * puzzle4x4-28.txt
  * puzzle4x4-29.txt
  * puzzle4x4-30.txt
==> passed

Test 14a: check moves() with random solvable n-by-n boards
  * 100 random 2-by-2 boards that are <= 6 moves from goal
  * 200 random 3-by-3 boards that are <= 20 moves from goal
  * 200 random 4-by-4 boards that are <= 20 moves from goal
  * 200 random 5-by-5 boards that are <= 20 moves from goal
==> passed

Test 14b: check solution() with random solvable n-by-n boards
  * 100 random 2-by-2 boards that are <= 6 moves from goal
  * 200 random 3-by-3 boards that are <= 20 moves from goal
  * 200 random 4-by-4 boards that are <= 20 moves from goal
  * 200 random 5-by-5 boards that are <= 20 moves from goal
==> passed


Total: 25/25 tests passed!


================================================================
********************************************************************************
*  MEMORY (substituting reference Board)
********************************************************************************

Analyzing memory of Solver
*-----------------------------------------------------------
Running 12 total tests.

Maximum allowed time per puzzle is 5.0 seconds.
Maximum allowed memory per puzzle = 200000000 bytes.

Test 1: Measure memory of Solver.

               filename   moves   memory
---------------------------------------------
=> passed  puzzle10.txt      10     5224         
=> passed  puzzle15.txt      15     6160         
=> passed  puzzle20.txt      20     4648         
=> passed  puzzle25.txt      25     6376         
=> FAILED  puzzle30.txt      30     8392   (1.1x)
=> FAILED  puzzle35.txt      35    11128   (1.1x)
==> 4/6 tests passed



Test 2: Measure memory of MinPQ.

                              deep              max           ending
               filename     memory             size             size
--------------------------------------------------------------------
=> passed  puzzle10.txt      14640               21               21         
=> passed  puzzle15.txt      16944               29               29         
=> passed  puzzle20.txt     113376              308              308         
=> passed  puzzle25.txt    1179280             3211             3211         
=> passed  puzzle30.txt    5387440            14236            14236         
=> passed  puzzle35.txt   35835824           104069           104069         
==> 6/6 tests passed


Total: 10/12 tests passed!


================================================================



********************************************************************************
*  TIMING (substituting reference Board)
********************************************************************************

Timing Solver
*-----------------------------------------------------------
Running 125 total tests.

Maximum allowed time per puzzle is 5.0 seconds.

Test 1: Measure CPU time and check correctness

               filename   moves    n  seconds
---------------------------------------------
=> passed  puzzle20.txt      20    3     0.01 
=> passed  puzzle22.txt      22    3     0.00 
=> passed  puzzle21.txt      21    3     0.00 
=> passed  puzzle23.txt      23    3     0.00 
=> passed  puzzle24.txt      24    3     0.00 
=> passed  puzzle25.txt      25    3     0.01 
=> passed  puzzle27.txt      27    3     0.00 
=> passed  puzzle29.txt      29    3     0.01 
=> passed  puzzle26.txt      26    3     0.00 
=> passed  puzzle28.txt      28    3     0.01 
=> passed  puzzle30.txt      30    3     0.02 
=> passed  puzzle31.txt      31    3     0.02 
=> passed  puzzle39.txt      39    4     0.07 
=> passed  puzzle41.txt      41    5     0.01 
=> passed  puzzle34.txt      34    4     0.12 
=> passed  puzzle37.txt      37    4     0.06 
=> passed  puzzle44.txt      44    5     0.07 
=> passed  puzzle32.txt      32    4     0.80 
=> passed  puzzle35.txt      35    4     0.14 
=> passed  puzzle33.txt      33    4     0.21 
=> passed  puzzle43.txt      43    4     0.48 
=> passed  puzzle46.txt      46    4     0.25 
=> passed  puzzle40.txt      40    4     0.37 
=> passed  puzzle36.txt      36    4     0.97 
=> passed  puzzle45.txt      45    4     0.49 
==> 25/25 tests passed



Test 2: Count MinPQ operations

               filename   insert()         delMin()
---------------------------------------------------
=> passed  puzzle20.txt        756              448         
=> passed  puzzle22.txt       2799             1653         
=> passed  puzzle21.txt       2083             1234         
=> passed  puzzle23.txt       3873             2304         
=> passed  puzzle24.txt       2391             1448         
=> passed  puzzle25.txt       7959             4748         
=> passed  puzzle27.txt       5327             3263         
=> passed  puzzle29.txt      16294             9953         
=> passed  puzzle26.txt       6990             4187         
=> passed  puzzle28.txt      14988             9138         
=> passed  puzzle30.txt      36501            22265         
=> passed  puzzle31.txt      33687            20735         
=> passed  puzzle39.txt     110260            54041         
=> passed  puzzle41.txt      23785            10214         
=> passed  puzzle34.txt     173975            83473         
=> passed  puzzle37.txt     110705            53227         
=> passed  puzzle44.txt     102860            46107         
=> passed  puzzle32.txt     879657           419762         
=> passed  puzzle35.txt     207131           103062         
=> passed  puzzle33.txt     290777           139485         
=> passed  puzzle43.txt     652238           320951         
=> passed  puzzle46.txt     374153           186921         
=> passed  puzzle40.txt     518402           256754         
=> passed  puzzle36.txt    1279158           623708         
=> passed  puzzle45.txt     643867           319963         
==> 25/25 tests passed



Test 3: Count Board operations (that should not get called)

               filename    hamming()   toString()
-------------------------------------------------
=> passed  puzzle20.txt            0            0         
=> passed  puzzle22.txt            0            0         
=> passed  puzzle21.txt            0            0         
=> passed  puzzle23.txt            0            0         
=> passed  puzzle24.txt            0            0         
=> passed  puzzle25.txt            0            0         
=> passed  puzzle27.txt            0            0         
=> passed  puzzle29.txt            0            0         
=> passed  puzzle26.txt            0            0         
=> passed  puzzle28.txt            0            0         
=> passed  puzzle30.txt            0            0         
=> passed  puzzle31.txt            0            0         
=> passed  puzzle39.txt            0            0         
=> passed  puzzle41.txt            0            0         
=> passed  puzzle34.txt            0            0         
=> passed  puzzle37.txt            0            0         
=> passed  puzzle44.txt            0            0         
=> passed  puzzle32.txt            0            0         
=> passed  puzzle35.txt            0            0         
=> passed  puzzle33.txt            0            0         
=> passed  puzzle43.txt            0            0         
=> passed  puzzle46.txt            0            0         
=> passed  puzzle40.txt            0            0         
=> passed  puzzle36.txt            0            0         
=> passed  puzzle45.txt            0            0         
==> 25/25 tests passed



Test 4a: Count Board operations (that should get called)

               filename    Board()            equals()         manhattan()
--------------------------------------------------------------------------
=> passed  puzzle20.txt       1206                1196                2414         
=> passed  puzzle22.txt       4454                4448                8910         
=> passed  puzzle21.txt       3319                3311                6640         
=> passed  puzzle23.txt       6179                6171               12360         
=> passed  puzzle24.txt       3841                3831                7684         
=> passed  puzzle25.txt      12709               12701               25420         
=> passed  puzzle27.txt       8592                8584               17186         
=> passed  puzzle29.txt      26249               26241               52500         
=> passed  puzzle26.txt      11179               11173               22360         
=> passed  puzzle28.txt      24128               24118               48258         
=> passed  puzzle30.txt      58768               58762              117538         
=> passed  puzzle31.txt      54424               54416              108850         
=> passed  puzzle39.txt     164303              164295              328608         
=> passed  puzzle41.txt      34001               33991               68004         
=> passed  puzzle34.txt     257450              257444              514902         
=> passed  puzzle37.txt     163934              163926              327870         
=> passed  puzzle44.txt     148969              148959              297940         
=> passed  puzzle32.txt    1299421             1299411             2598844         
=> passed  puzzle35.txt     310195              310185              620392         
=> passed  puzzle33.txt     430264              430256              860530         
=> passed  puzzle43.txt     973191              973183             1946384         
=> passed  puzzle46.txt     561076              561068             1122154         
=> passed  puzzle40.txt     775158              775152             1550318         
=> passed  puzzle36.txt    1902868             1902858             3805738         
=> passed  puzzle45.txt     963832              963824             1927666         
==> 25/25 tests passed



Test 4b: count Board operations (that should get called),
         rejecting if doesn't adhere to stricter caching limits

               filename    Board()            equals()         manhattan()
--------------------------------------------------------------------------
=> passed  puzzle20.txt       1206                1196                2414         
=> passed  puzzle22.txt       4454                4448                8910         
=> passed  puzzle21.txt       3319                3311                6640         
=> passed  puzzle23.txt       6179                6171               12360         
=> passed  puzzle24.txt       3841                3831                7684         
=> passed  puzzle25.txt      12709               12701               25420         
=> passed  puzzle27.txt       8592                8584               17186         
=> FAILED  puzzle29.txt      26249               26241               52500   (1.6x)
=> passed  puzzle26.txt      11179               11173               22360         
=> passed  puzzle28.txt      24128               24118               48258         
=> passed  puzzle30.txt      58768               58762              117538         
=> passed  puzzle31.txt      54424               54416              108850         
=> FAILED  puzzle39.txt     164303              164295              328608   (1.8x)
=> passed  puzzle41.txt      34001               33991               68004         
=> FAILED  puzzle34.txt     257450              257444              514902   (1.3x)
=> passed  puzzle37.txt     163934              163926              327870         
=> passed  puzzle44.txt     148969              148959              297940         
=> FAILED  puzzle32.txt    1299421             1299411             2598844   (1.9x)
=> passed  puzzle35.txt     310195              310185              620392         
=> passed  puzzle33.txt     430264              430256              860530         
=> passed  puzzle43.txt     973191              973183             1946384         
=> passed  puzzle46.txt     561076              561068             1122154         
=> passed  puzzle40.txt     775158              775152             1550318         
=> passed  puzzle36.txt    1902868             1902858             3805738         
=> passed  puzzle45.txt     963832              963824             1927666         
==> 21/25 tests passed


Total: 121/125 tests passed!


================================================================
